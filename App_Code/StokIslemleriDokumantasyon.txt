===============================================
STOK YÖNETİM SİSTEMİ DOKÜMANTASYONU
===============================================

Bu dokümantasyon, Zeytin Fabrikası Yönetim Sistemi'ndeki stok yönetimi modülünün
detaylarını ve kullanımını açıklamaktadır.

1. GENEL BAKIŞ
===============
Stok yönetim sistemi, ürünlerin depolar bazında stok takibini yapan ve 
satış, alış, üretim gibi işlemlerde stok hareketlerini otomatik
olarak oluşturan bir sistemdir.

2. VERİTABANI YAPISI
====================

Sistem aşağıdaki veritabanı tablolarını kullanmaktadır:

a) DepoStok
-----------
- DepoStokID: Otomatik artan benzersiz kimlik
- SirketID: Şirket kimliği
- DepoID: Depo kimliği (Depolar tablosuna referans)
- UrunID: Ürün kimliği (Urunler tablosuna referans)
- Miktar: Stok miktarı (Decimal)
- MinimumMiktar: Minimum stok seviyesi (opsiyonel)
- SonGuncellemeTarihi: Son güncelleme tarihi

Bu tablo her bir depo-ürün kombinasyonu için mevcut stok miktarını saklar.

b) StokHareketleri
-----------------
- HareketID: Otomatik artan benzersiz kimlik
- SirketID: Şirket kimliği
- IslemTarihi: İşlem tarihi
- HareketTipi: Hareket tipi ('GIRIS', 'CIKIS', 'SATIS', 'ALIS', 'TRANSFER', vb.)
- DepoID: Depo kimliği
- UrunID: Ürün kimliği
- Miktar: İşlem miktarı (giriş için pozitif, çıkış için negatif)
- ReferansNo: İlgili belge numarası (opsiyonel)
- ReferansID: İlgili belge kimliği (opsiyonel)
- ReferansTipi: İlgili belge tipi (opsiyonel)
- Aciklama: İşlem açıklaması
- KullaniciID: İşlemi yapan kullanıcı (opsiyonel)

Bu tablo tüm stok hareketlerinin geçmişini tutar.

3. STORED PROCEDURE
==================

SP_StokHareket: Stok hareketlerini işleyen ve stok miktarlarını güncelleyen stored procedure.

Parametreler:
- @SirketID: Şirket kimliği
- @HareketTipi: İşlem tipi ('GIRIS', 'CIKIS', 'SATIS', vb.)
- @DepoID: Depo kimliği
- @UrunID: Ürün kimliği
- @Miktar: İşlem miktarı
- @ReferansNo: İlgili belge numarası (opsiyonel)
- @ReferansID: İlgili belge kimliği (opsiyonel)
- @ReferansTipi: İlgili belge tipi (opsiyonel)
- @Aciklama: İşlem açıklaması (opsiyonel)
- @KullaniciID: İşlemi yapan kullanıcı (opsiyonel)

4. C# YARDIMCI SINIFI - StokHelper
==================================

StokHelper sınıfı, stok işlemlerini kolaylaştırmak için geliştirilmiş yardımcı bir sınıftır.
Bu sınıf, SP_StokHareket stored procedure'ünü çağırarak stok hareketlerini oluşturur.

a) SatisStokCikisiYap
---------------------
Satış işlemi sırasında stok çıkışı yapmak için kullanılır.

Parametreler:
- sirketID: Şirket kimliği
- satisID: Satış belgesi kimliği
- satisDetaylari: Satış detayları listesi (SatisDetaylari sınıfı)
- kullaniciID: İşlemi yapan kullanıcı (opsiyonel)

Dönüş: İşlem başarılı ise true, değilse false

b) StokHareketiYap
-----------------
Tekil bir stok hareketi oluşturmak için kullanılır.

Parametreler:
- sirketID: Şirket kimliği
- hareketTipi: İşlem tipi ('GIRIS', 'CIKIS', 'SATIS', vb.)
- depoID: Depo kimliği
- urunID: Ürün kimliği
- miktar: İşlem miktarı
- referansTipi: İlgili belge tipi (opsiyonel)
- referansID: İlgili belge kimliği (opsiyonel)
- aciklama: İşlem açıklaması (opsiyonel)
- kullaniciID: İşlemi yapan kullanıcı (opsiyonel)

Dönüş: İşlem başarılı ise true, değilse false

c) GetStokMiktari
----------------
Belirli bir depo ve ürün için stok miktarını döndürür.

Parametreler:
- depoID: Depo kimliği
- urunID: Ürün kimliği

Dönüş: Stok miktarı (decimal)

5. SATIŞ İŞLEMİNDE STOK ENTEGRASYONU
===================================

MusteriSatis.aspx sayfasındaki btnFaturaKaydet_Click metodunda satış kaydı
tamamlandıktan sonra stok çıkışları otomatik olarak oluşturulur.

Entegrasyon Aşamaları:
---------------------
1. Satış ana kaydı oluşturulur
2. Satış detayları kaydedilir
3. Stok hareketi oluşturmak için StokHelper.SatisStokCikisiYap çağrılır
4. İşlem sonucu kontrol edilir

Kod Örneği:
----------
```csharp
// Satış detayları kaydedilirken bir liste oluşturulur
List<SatisDetaylari> satisDetaylari = new List<SatisDetaylari>();

// Satış detayları veritabanına kaydedilir ve listeye eklenir
foreach (var item in sepet)
{
    SatisDetaylari detay = new SatisDetaylari();
    // ... detay alanları doldurulur ...
    db.SatisDetaylaris.InsertOnSubmit(detay);
    satisDetaylari.Add(detay);
}

// Veritabanı değişiklikleri kaydedilir
db.SubmitChanges();

// Stok hareketleri oluşturulur
bool stokSonuc = StokHelper.SatisStokCikisiYap(sirketID, yeniSatis.SatisID, satisDetaylari, GetKullaniciID());

if (!stokSonuc)
{
    // Stok hatası durumunda loglama yapılır
    System.Diagnostics.Debug.WriteLine("UYARI: Satış kaydedildi fakat stok çıkışı yapılamadı.");
}
```

6. GELİŞTİRME ÖNERİLERİ
=====================

1. Ürün Satışı Öncesi Stok Kontrolü
----------------------------------
Satış işleminden önce stok kontrolü yapmak, stok eksik olduğunda kullanıcıyı uyarmak
ve işlem yapılmasını engellemek daha iyi olabilir.

Örnek:
```csharp
decimal mevcutStok = StokHelper.GetStokMiktari(depoID, urunID);
if (mevcutStok < satisMiktari)
{
    // Stok yetersiz - uyarı göster ve işlemi engelle
}
```

2. Depo Seçimi
-------------
Şu anda satış işlemlerinde sabit olarak DepoID=1 (Ana Depo) kullanılmaktadır.
Kullanıcıya depo seçimi sunmak için formda depo seçimi eklenebilir.

3. Stok Takibi Olmayan Ürünler
-----------------------------
Hizmet gibi stok takibi yapılmayan ürünler için Urunler tablosundaki UrunTipiStoklu
alanı kullanılabilir. Bu alan false ise, stok kontrolü yapılmadan işleme devam edilebilir.

4. İşlem İptal / Düzeltme
-----------------------
Satış iptal edildiğinde veya düzeltildiğinde, ilgili stok hareketlerini de iptal eden
veya düzelten bir fonksiyon eklenebilir.

7. UYARI VE HATALAR
==================

Olası Stok Hataları:
-------------------
1. Yetersiz Stok: Ürünün mevcut stok miktarı satılmak istenen miktardan az
2. Depo Bulunamadı: Belirtilen DepoID ile bir depo kaydı yok
3. Ürün Bulunamadı: Belirtilen UrunID ile bir ürün kaydı yok
4. Veritabanı Hatası: Stored procedure çalışırken veritabanı hatası 

8. SORGU ÖRNEKLERİ
=================

1. Ürün Bazında Stok Durumu
--------------------------
```sql
SELECT d.DepoAdi, u.UrunKodu, u.UrunAdi, ds.Miktar, b.BirimAdi
FROM DepoStok ds
JOIN Depolar d ON ds.DepoID = d.DepoID
JOIN Urunler u ON ds.UrunID = u.UrunID
LEFT JOIN Birimler b ON u.BirimID = b.BirimID
WHERE ds.SirketID = @SirketID
```

2. Kritik Stok Seviyesindeki Ürünler
-----------------------------------
```sql
SELECT d.DepoAdi, u.UrunKodu, u.UrunAdi, ds.Miktar, ds.MinimumMiktar
FROM DepoStok ds
JOIN Depolar d ON ds.DepoID = d.DepoID
JOIN Urunler u ON ds.UrunID = u.UrunID
WHERE ds.SirketID = @SirketID AND ds.Miktar <= ds.MinimumMiktar
```

3. Belirli Bir Ürünün Stok Hareketleri
-------------------------------------
```sql
SELECT sh.IslemTarihi, sh.HareketTipi, sh.Miktar, d.DepoAdi, 
       sh.ReferansNo, sh.ReferansTipi, sh.Aciklama
FROM StokHareketleri sh
JOIN Depolar d ON sh.DepoID = d.DepoID
WHERE sh.SirketID = @SirketID AND sh.UrunID = @UrunID
ORDER BY sh.IslemTarihi DESC
```

9. SIKÇA SORULAN SORULAR
=======================

S: Neden stok işlemleri satış/alış kaydından sonra yapılıyor?
C: Veritabanı tutarlılığını korumak için önce ana işlem (satış/alış) kaydedilir,
   ardından stok işlemleri yapılır. Bu yaklaşım, hata durumunda daha kolay
   kurtarma sağlar.

S: Stok bakiyesi negatif olabilir mi?
C: Hayır, stok bakiyesi negatif olamaz. SP_StokHareket stored procedure'ü
   stok çıkışı yapılırken miktar kontrolü yapar ve yetersiz stok durumunda
   hata döndürür.

S: Hangi durumlarda stok hareketi oluşturulur?
C: Satış, alış, üretim, transfer, fire gibi işlemlerde stok hareketi oluşturulur.
   Her işlem için farklı bir HareketTipi değeri kullanılır.

============================================================
NOT: Bu dokümantasyon, sistem geliştirilirken güncellenmelidir.
Son güncelleme: 30.07.2024
============================================================ 